volumes:
  public_assets: {}
  nginx-logs: {}
  certbot-etc: {}
  crowdsec_db: {}

services:
  app:
    build:
        context: .
        dockerfile: ./docker/Dockerfile
        target: builder
    volumes:
      - public_assets:/var/www/public
    ports:
      - '8088:8088'
    restart: always

  webserver:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    image: perfumarte-nginx-custom:latest
    container_name: perfumarte-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './docker/production/nginx/app.conf:/etc/nginx/conf.d/default.conf:ro' # Montamos el app.conf directamente
      - './docker/production/nginx/security.inc:/etc/nginx/conf.d/security.inc:ro' # Montamos security.inc
      - './certbot/conf:/etc/letsencrypt:ro'
      - './certbot/www:/var/www/certbot:ro'
      - public_assets:/var/www/public:ro
      - nginx-logs:/var/log/nginx # Nginx escribirá aquí gracias al entrypoint
    # Ya no se necesita entrypoint aquí, se define en el Dockerfile
    depends_on:
      - app

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: perfumarte-crowdsec
    restart: unless-stopped
    environment:
      COLLECTIONS: "crowdsecurity/nginx"
    volumes:
      - ./docker/production/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      - crowdsec_db:/var/lib/crowdsec/data/
      - nginx-logs:/var/log/nginx:ro
    depends_on:
      - webserver

  nginx-bouncer:
    image: crowdsecurity/nginx:latest # Corrected image name
    container_name: perfumarte-nginx-bouncer
    restart: unless-stopped
    environment:
      CROWDSEC_BOUNCER_API_KEY: ${CROWDSEC_BOUNCER_API_KEY:-YOUR_API_KEY} # Replace with actual API key or set in .env
      CROWDSEC_AGENT_HOST: crowdsec:8080
    volumes:
      - ./docker/production/nginx/app.conf:/etc/nginx/conf.d/default.conf # Ensure this path is correct
    depends_on:
      - crowdsec
      - webserver